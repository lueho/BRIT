# Generated by Django 3.0.3 on 2020-05-13 10:07

import django.contrib.gis.db.models.fields
import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Catchment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('type', models.CharField(choices=[('administrative', 'administrative'), ('custom', 'custom')],
                                          default='custom', max_length=14, null=True)),
                ('geom', django.contrib.gis.db.models.fields.MultiPolygonField(null=True, srid=4326)),
                ('owner', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE,
                                            to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='GeoDataset',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=56)),
                ('description', models.TextField(blank=True, null=True)),
                ('model_name',
                 models.CharField(choices=[('HamburgRoadsideTrees', 'HamburgRoadsideTrees')], max_length=56,
                                  null=True)),
            ],
        ),
        migrations.CreateModel(
            name='InventoryAlgorithm',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=56)),
                ('function_name', models.CharField(max_length=56, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('default', models.BooleanField(default=False,
                                                verbose_name='Default for this combination of geodataset and feedstock')),
                ('source', models.CharField(blank=True, max_length=200, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='InventoryAlgorithmParameter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('short_name', models.CharField(max_length=28, validators=[
                    django.core.validators.RegexValidator(code='nomatch', message='STAN id must have 5 digits.s',
                                                          regex='^\\w{1,28}$')])),
                ('descriptive_name', models.CharField(max_length=56)),
                ('description', models.TextField(blank=True, null=True)),
                ('unit', models.CharField(blank=True, max_length=20, null=True)),
                ('is_required', models.BooleanField(default=False)),
                ('inventory_algorithm', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE,
                                                          to='scenario_builder.InventoryAlgorithm')),
            ],
        ),
        migrations.CreateModel(
            name='InventoryAlgorithmParameterValue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=56)),
                ('description', models.TextField(blank=True, null=True)),
                ('value', models.FloatField()),
                ('standard_deviation', models.FloatField(null=True)),
                ('source', models.CharField(blank=True, max_length=200, null=True)),
                ('default', models.BooleanField(default=False)),
                ('parameter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE,
                                                to='scenario_builder.InventoryAlgorithmParameter')),
            ],
        ),
        migrations.CreateModel(
            name='Material',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=28)),
                ('description', models.TextField(blank=True, null=True)),
                ('is_feedstock', models.BooleanField(default=False)),
                ('stan_flow_id', models.CharField(max_length=5, validators=[
                    django.core.validators.RegexValidator(code='nomatch', message='STAN id must have 5 digits.s',
                                                          regex='^[0-9]{5}?')])),
            ],
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=56)),
                ('country', models.CharField(max_length=56)),
                ('geom', django.contrib.gis.db.models.fields.MultiPolygonField(null=True, srid=4326)),
            ],
        ),
        migrations.CreateModel(
            name='Scenario',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=56, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('use_default_configuration', models.BooleanField(default=True)),
                ('catchment', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE,
                                                to='scenario_builder.Catchment')),
                ('feedstocks',
                 models.ManyToManyField(limit_choices_to={'is_feedstock': True}, to='scenario_builder.Material')),
                ('owner', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE,
                                            to=settings.AUTH_USER_MODEL)),
                ('region', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE,
                                             to='scenario_builder.Region')),
            ],
        ),
        migrations.CreateModel(
            name='SFBSite',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, null=True)),
                ('geom', django.contrib.gis.db.models.fields.PointField(null=True, srid=4326)),
                ('owner', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE,
                                            to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ScenarioInventoryConfiguration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('feedstock',
                 models.ForeignKey(limit_choices_to={'is_feedstock': True}, on_delete=django.db.models.deletion.CASCADE,
                                   to='scenario_builder.Material')),
                ('geodataset',
                 models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='scenario_builder.GeoDataset')),
                ('inventory_algorithm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE,
                                                          to='scenario_builder.InventoryAlgorithm')),
                ('inventory_parameter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE,
                                                          to='scenario_builder.InventoryAlgorithmParameter')),
                ('inventory_value', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE,
                                                      to='scenario_builder.InventoryAlgorithmParameterValue')),
                ('scenario',
                 models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='scenario_builder.Scenario')),
            ],
        ),
        migrations.AddField(
            model_name='scenario',
            name='site',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE,
                                    to='scenario_builder.SFBSite'),
        ),
        migrations.CreateModel(
            name='MaterialComponent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
                ('description', models.TextField(blank=True, null=True)),
                ('average', models.FloatField()),
                ('standard_deviation', models.FloatField(null=True)),
                ('source', models.CharField(max_length=20)),
                ('material',
                 models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='scenario_builder.Material')),
            ],
        ),
        migrations.AddField(
            model_name='inventoryalgorithm',
            name='feedstock',
            field=models.ForeignKey(limit_choices_to={'is_feedstock': True},
                                    on_delete=django.db.models.deletion.CASCADE, to='scenario_builder.Material'),
        ),
        migrations.AddField(
            model_name='inventoryalgorithm',
            name='geodataset',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='scenario_builder.GeoDataset'),
        ),
        migrations.AddField(
            model_name='geodataset',
            name='region',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='scenario_builder.Region'),
        ),
        migrations.AddField(
            model_name='catchment',
            name='region',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE,
                                    to='scenario_builder.Region'),
        ),
    ]
