from rest_framework.viewsets import ModelViewSet

from .permissions import HasModelPermission


class AutoPermModelViewSet(ModelViewSet):
    """
    A custom ViewSet that extends the base ModelViewSet provided by Django REST Framework.

    This ViewSet automatically generates permissions for the standard actions (create, list, retrieve, update, partial_update, destroy)
    based on the model associated with the ViewSet. It also allows for custom permissions to be defined.

    Attributes:
    permission_classes (list): The list of permission classes that are used to check if a request has permission to perform an action.
    custom_permission_required (dict): A dictionary mapping action names to permission strings for any custom permissions.
    """
    permission_classes = [HasModelPermission]
    custom_permission_required = {}
    _permission_required_generated = False

    @property
    def permission_required(self):
        """
        Combines autogenerated permissions with any custom permissions defined in the ViewSet.
        Custom permissions override autogenerated ones for the same actions.
        """
        if not self._permission_required_generated:  # Ensure permissions are generated once
            autogenerated_permissions = self._generate_permission_required()
            self._permission_required = {**autogenerated_permissions, **self.custom_permission_required}
            self._permission_required_generated = True
        return self._permission_required

    def _generate_permission_required(self):
        """
        Generates a dictionary mapping action names to permission strings based on the model associated with the ViewSet.

        Returns:
        dict: A dictionary mapping action names to permission strings.
        """
        actions_permissions = {
            'create': 'add',
            'list': 'view',
            'retrieve': 'view',
            'update': 'change',
            'partial_update': 'change',
            'destroy': 'delete',
        }
        permission_required = {}
        model_cls = self.get_queryset().model
        model_name = model_cls._meta.model_name
        app_label = model_cls._meta.app_label
        for action, permission_prefix in actions_permissions.items():
            permission_required[action] = f'{app_label}.{permission_prefix}_{model_name}'
        return permission_required

    def get_permissions(self):
        """
        Override get_permissions to ensure permission_required is generated
        before permissions are checked.
        """
        # This triggers the lazy initialization of permission_required if needed
        _ = self.permission_required
        return super().get_permissions()
