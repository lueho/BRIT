from django.test import TestCase
from unittest.mock import patch, MagicMock

from ..viewsets import AutoPermModelViewSet


class AutoPermModelViewSetTestCase(TestCase):

    def setUp(self):
        self.viewset = AutoPermModelViewSet()
        self.viewset.queryset = MagicMock()
        self.model_cls = MagicMock()
        self.model_cls._meta.model_name = 'testmodel'
        self.model_cls._meta.app_label = 'testapp'
        self.viewset.get_queryset = MagicMock(return_value=MagicMock(model=self.model_cls))

    def test_generate_permission_required(self):
        expected_permissions = {
            'create': 'testapp.add_testmodel',
            'list': 'testapp.view_testmodel',
            'retrieve': 'testapp.view_testmodel',
            'update': 'testapp.change_testmodel',
            'partial_update': 'testapp.change_testmodel',
            'destroy': 'testapp.delete_testmodel',
        }
        autogenerated_permissions = self.viewset._generate_permission_required()
        self.assertEqual(autogenerated_permissions, expected_permissions)

    def test_custom_override_autogenerated_permissions(self):
        self.viewset.custom_permission_required = {'list': 'custom.list_permission'}
        expected_permissions = {
            'create': 'testapp.add_testmodel',
            'list': 'custom.list_permission',
            'retrieve': 'testapp.view_testmodel',
            'update': 'testapp.change_testmodel',
            'partial_update': 'testapp.change_testmodel',
            'destroy': 'testapp.delete_testmodel',
        }
        actual_permissions = self.viewset.permission_required
        self.assertEqual(actual_permissions, expected_permissions)

    def test_permission_required_generated_once(self):
        """Ensure permission_required property generates permissions only once."""
        with patch.object(self.viewset, '_generate_permission_required',
                          wraps=self.viewset._generate_permission_required) as mocked_method:
            _ = self.viewset.permission_required
            _ = self.viewset.permission_required
            mocked_method.assert_called_once()

    def test_get_permissions_triggers_permission_generation(self):
        self.assertFalse(self.viewset._permission_required_generated)
        self.viewset.get_permissions()
        self.assertTrue(self.viewset._permission_required_generated)
