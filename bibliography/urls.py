from django.urls import include, path

from .router import router
from .views import (
    AuthorAutocompleteView,
    AuthorCreateView,
    AuthorDetailView,
    AuthorModalCreateView,
    AuthorModalDeleteView,
    AuthorModalDetailView,
    AuthorModalUpdateView,
    AuthorPrivateListView,
    AuthorPublishedListView,
    AuthorUpdateView,
    BibliographyDashboardView,
    LicenceCreateView,
    LicenceDetailView,
    LicenceModalCreateView,
    LicenceModalDeleteView,
    LicenceModalDetailView,
    LicenceModalUpdateView,
    LicencePrivateListView,
    LicencePublishedListView,
    LicenceUpdateView,
    SourceAutocompleteView,
    SourceCheckUrlProgressView,
    SourceCheckUrlView,
    SourceCreateView,
    SourceDetailView,
    SourceListCheckUrlsView,
    SourceModalCreateView,
    SourceModalDeleteView,
    SourceModalDetailView,
    SourcePrivateFilterView,
    SourcePublishedFilterView,
    SourceUpdateView,
)

urlpatterns = [
    path(
        "explorer/",
        BibliographyDashboardView.as_view(),
        name="bibliography-dashboard",
    ),
    path("authors/", AuthorPublishedListView.as_view(), name="author-list"),
    path("authors/user/", AuthorPrivateListView.as_view(), name="author-list-owned"),
    path("authors/create/", AuthorCreateView.as_view(), name="author-create"),
    path(
        "authors/create/modal/",
        AuthorModalCreateView.as_view(),
        name="author-create-modal",
    ),
    path("authors/<int:pk>/", AuthorDetailView.as_view(), name="author-detail"),
    path(
        "authors/<int:pk>/modal/",
        AuthorModalDetailView.as_view(),
        name="author-detail-modal",
    ),
    path(
        "authors/<int:pk>/update/",
        AuthorUpdateView.as_view(),
        name="author-update",
    ),
    path(
        "authors/<int:pk>/update/modal/",
        AuthorModalUpdateView.as_view(),
        name="author-update-modal",
    ),
    path(
        "authors/autocomplete/",
        AuthorAutocompleteView.as_view(),
        name="author-autocomplete",
    ),
    path(
        "authors/<int:pk>/delete/modal/",
        AuthorModalDeleteView.as_view(),
        name="author-delete-modal",
    ),
    path("licences/", LicencePublishedListView.as_view(), name="licence-list"),
    path(
        "licences/user/",
        LicencePrivateListView.as_view(),
        name="licence-list-owned",
    ),
    path("licences/create/", LicenceCreateView.as_view(), name="licence-create"),
    path(
        "licences/create/modal/",
        LicenceModalCreateView.as_view(),
        name="licence-create-modal",
    ),
    path("licences/<int:pk>/", LicenceDetailView.as_view(), name="licence-detail"),
    path(
        "licences/<int:pk>/modal/",
        LicenceModalDetailView.as_view(),
        name="licence-detail-modal",
    ),
    path(
        "licences/<int:pk>/update/",
        LicenceUpdateView.as_view(),
        name="licence-update",
    ),
    path(
        "licences/<int:pk>/update/modal/",
        LicenceModalUpdateView.as_view(),
        name="licence-update-modal",
    ),
    path(
        "licences/<int:pk>/delete/modal/",
        LicenceModalDeleteView.as_view(),
        name="licence-delete-modal",
    ),
    path("sources/", SourcePublishedFilterView.as_view(), name="source-list"),
    path(
        "sources/user/",
        SourcePrivateFilterView.as_view(),
        name="source-list-owned",
    ),
    path("sources/create/", SourceCreateView.as_view(), name="source-create"),
    path(
        "sources/create/modal/",
        SourceModalCreateView.as_view(),
        name="source-create-modal",
    ),
    path("sources/<int:pk>/", SourceDetailView.as_view(), name="source-detail"),
    path(
        "sources/<int:pk>/modal/",
        SourceModalDetailView.as_view(),
        name="source-detail-modal",
    ),
    path(
        "sources/<int:pk>/update/",
        SourceUpdateView.as_view(),
        name="source-update",
    ),
    path(
        "sources/<int:pk>/delete/modal/",
        SourceModalDeleteView.as_view(),
        name="source-delete-modal",
    ),
    path(
        "sources/<int:pk>/check_url_in_task/",
        SourceCheckUrlView.as_view(),
        name="source-check-url",
    ),
    path(
        "sources/check_url_in_task/<str:task_id>/progress/",
        SourceCheckUrlProgressView.as_view(),
        name="source-check-url-progress",
    ),
    path(
        "sources/list/check_urls/",
        SourceListCheckUrlsView.as_view(),
        name="source-list-check-urls",
    ),
    path(
        "sources/autocomplete/",
        SourceAutocompleteView.as_view(),
        name="source-autocomplete",
    ),
    path("api/", include(router.urls)),
]
