# Generated by Django 5.1.1 on 2024-11-15 16:03

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('maps', '0019_alter_geodataset_map_configuration_and_more'),
    ]

    operations = [
        migrations.AlterField(
            model_name='maplayerconfiguration',
            name='api_basename',
            field=models.CharField(blank=True, help_text='Base name for API used to derive endpoint urls for geometries, details and summaries', max_length=255),
        ),
        migrations.AlterField(
            model_name='maplayerconfiguration',
            name='feature_id',
            field=models.CharField(blank=True, help_text='Unique identifier for the feature if fixed.', max_length=255),
        ),
        migrations.AlterField(
            model_name='maplayerconfiguration',
            name='style',
            field=models.ForeignKey(help_text='Styling information for the layer.', on_delete=django.db.models.deletion.PROTECT, related_name='layer_configurations', to='maps.maplayerstyle'),
        ),
        migrations.AlterField(
            model_name='maplayerstyle',
            name='color',
            field=models.CharField(default='#3388ff', help_text='Stroke color for the layer in hexadecimal format.', max_length=7, validators=[django.core.validators.RegexValidator(message='Enter a valid hex color code.', regex='^#(?:[0-9a-fA-F]{3}){1,2}$')]),
        ),
        migrations.AlterField(
            model_name='maplayerstyle',
            name='fill_color',
            field=models.CharField(blank=True, help_text='Fill color for the layer in hexadecimal format.', max_length=7, validators=[django.core.validators.RegexValidator(message='Enter a valid hex color code.', regex='^#(?:[0-9a-fA-F]{3}){1,2}$')]),
        ),
        migrations.AlterField(
            model_name='maplayerstyle',
            name='fill_opacity',
            field=models.FloatField(default=0.2, help_text='Fill opacity, between 0 and 1.', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)]),
        ),
        migrations.AlterField(
            model_name='maplayerstyle',
            name='fill_rule',
            field=models.CharField(choices=[('evenodd', 'Even-Odd'), ('nonzero', 'Non-Zero')], default='evenodd', help_text='Rule used to determine if a point is inside the path.', max_length=10),
        ),
        migrations.AlterField(
            model_name='maplayerstyle',
            name='line_cap',
            field=models.CharField(choices=[('butt', 'Butt'), ('round', 'Round'), ('square', 'Square')], default='round', help_text='Shape to be used at the end of the stroke.', max_length=10),
        ),
        migrations.AlterField(
            model_name='maplayerstyle',
            name='line_join',
            field=models.CharField(choices=[('miter', 'Miter'), ('round', 'Round'), ('bevel', 'Bevel')], default='round', help_text='Shape to be used at the joints between segments.', max_length=10),
        ),
        migrations.AlterField(
            model_name='maplayerstyle',
            name='opacity',
            field=models.FloatField(default=1.0, help_text='Stroke opacity, between 0 and 1.', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)]),
        ),
        migrations.AlterField(
            model_name='modelmapconfiguration',
            name='map_config',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='model_map_configurations', to='maps.mapconfiguration'),
        ),
    ]
