# Generated by Django 5.1.1 on 2024-11-11 15:26

import django.db.models.deletion
import django.utils.timezone
import maps.models
import utils.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('contenttypes', '0002_remove_content_type_name'),
        ('maps', '0016_alter_geodataset_preview'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.RemoveField(
            model_name='geodataset',
            name='resources',
        ),
        migrations.AddField(
            model_name='geodataset',
            name='data_content_type',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype'),
        ),
        migrations.AddField(
            model_name='geodataset',
            name='data_object_id',
            field=models.PositiveIntegerField(null=True),
        ),
        migrations.CreateModel(
            name='MapConfiguration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(db_index=True, default=django.utils.timezone.now, verbose_name='Created at')),
                ('lastmodified_at', models.DateTimeField(db_index=True, default=django.utils.timezone.now, verbose_name='Last modified at')),
                ('publication_status', models.CharField(choices=[('private', 'Private'), ('review', 'Under Review'), ('published', 'Published')], default='private', max_length=10)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('adjust_bounds_to_layer', models.CharField(choices=[('region', 'Region'), ('catchment', 'Catchment'), ('features', 'Features')], default='region', help_text='Layer to which the map bounds should be adjusted.', max_length=50)),
                ('apply_filter_to_features', models.BooleanField(default=False)),
                ('load_features_layer_summary', models.BooleanField(default=False)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('lastmodified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_lastmodified', to=settings.AUTH_USER_MODEL, verbose_name='Last modified by')),
                ('owner', models.ForeignKey(default=utils.models.get_default_owner_pk, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ('visible_to_groups', models.ManyToManyField(to='auth.group')),
            ],
            options={
                'ordering': ['name', 'id'],
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='geodataset',
            name='map_configuration',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='maps.mapconfiguration'),
        ),
        migrations.CreateModel(
            name='MapLayerConfiguration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(db_index=True, default=django.utils.timezone.now, verbose_name='Created at')),
                ('lastmodified_at', models.DateTimeField(db_index=True, default=django.utils.timezone.now, verbose_name='Last modified at')),
                ('publication_status', models.CharField(choices=[('private', 'Private'), ('review', 'Under Review'), ('published', 'Published')], default='private', max_length=10)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('layer_type', models.CharField(choices=[('region', 'Region'), ('catchment', 'Catchment'), ('features', 'Features')], help_text='Type of the layer (region, catchment, feature).', max_length=50)),
                ('load_layer', models.BooleanField(default=True, help_text='If False, the dataset will not be loaded initially to avoid long loading times.')),
                ('feature_id', models.CharField(blank=True, help_text='ID of the specific feature or boundary to be loaded.', max_length=255)),
                ('api_basename', models.CharField(blank=True, help_text='Base name for API used to derive additional URLs.', max_length=255)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('lastmodified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_lastmodified', to=settings.AUTH_USER_MODEL, verbose_name='Last modified by')),
                ('owner', models.ForeignKey(default=utils.models.get_default_owner_pk, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ('visible_to_groups', models.ManyToManyField(to='auth.group')),
            ],
            options={
                'ordering': ['name', 'id'],
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='mapconfiguration',
            name='layers',
            field=models.ManyToManyField(help_text='Layers associated with this map configuration.', related_name='map_configurations', to='maps.maplayerconfiguration'),
        ),
        migrations.CreateModel(
            name='MapLayerStyle',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(db_index=True, default=django.utils.timezone.now, verbose_name='Created at')),
                ('lastmodified_at', models.DateTimeField(db_index=True, default=django.utils.timezone.now, verbose_name='Last modified at')),
                ('publication_status', models.CharField(choices=[('private', 'Private'), ('review', 'Under Review'), ('published', 'Published')], default='private', max_length=10)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('stroke', models.BooleanField(default=True, help_text='If False, the layer will not have a stroke.')),
                ('color', models.CharField(default='#3388ff', help_text='Stroke color for the layer.', max_length=30)),
                ('weight', models.PositiveIntegerField(default=3, help_text='Stroke width in pixels.')),
                ('opacity', models.FloatField(default=1.0, help_text='Stroke opacity, between 0 and 1.')),
                ('fill', models.BooleanField(default=True, help_text='If False, the layer will not have a fill.')),
                ('fill_color', models.CharField(blank=True, help_text='Fill color for the layer.', max_length=30)),
                ('fill_opacity', models.FloatField(default=0.2, help_text='Fill opacity, between 0 and 1.')),
                ('dash_array', models.CharField(blank=True, help_text="Define the stroke dash pattern, e.g., '5, 10'.", max_length=50)),
                ('dash_offset', models.CharField(blank=True, help_text='Define the stroke dash offset.', max_length=50)),
                ('line_cap', models.CharField(default='round', help_text="Shape to be used at the end of the stroke (options: 'butt', 'round', 'square').", max_length=10)),
                ('line_join', models.CharField(default='round', help_text="Shape to be used at the joints between segments (options: 'miter', 'round', 'bevel').", max_length=10)),
                ('fill_rule', models.CharField(default='evenodd', help_text="Rule used to determine if a point is inside the path (options: 'evenodd', 'nonzero').", max_length=10)),
                ('class_name', models.CharField(blank=True, help_text='CSS class name(s) to add to the layer for additional styling.', max_length=50)),
                ('radius', models.FloatField(default=10.0, help_text='Radius of the circle marker in pixels.')),
                ('bubbling_mouse_events', models.BooleanField(default=True, help_text='When true, a mouse event on this path will trigger the same event on the map.')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('lastmodified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_lastmodified', to=settings.AUTH_USER_MODEL, verbose_name='Last modified by')),
                ('owner', models.ForeignKey(default=utils.models.get_default_owner_pk, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ('visible_to_groups', models.ManyToManyField(to='auth.group')),
            ],
            options={
                'ordering': ['name', 'id'],
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='maplayerconfiguration',
            name='style',
            field=models.ForeignKey(help_text='Styling information for the layer.', on_delete=django.db.models.deletion.CASCADE, to='maps.maplayerstyle'),
        ),
        migrations.CreateModel(
            name='ModelMapConfiguration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('model_name', models.CharField(choices=maps.models.get_model_choices, max_length=100, unique=True)),
                ('map_config', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='maps.mapconfiguration')),
            ],
            options={
                'ordering': ['model_name'],
            },
        ),
    ]
