"use strict";let map,regionLayer,catchmentLayer,featuresLayer,regionLayerStyle,catchmentLayerStyle,featuresLayerStyle;const defaultLayerOrder=["region","catchment","features"],clientCacheConfig={maxAge:36e5,maxEntries:500,cacheName:"britMapsCache",cacheVersion:2};function initializeDB(){return new Promise(((e,t)=>{const r=indexedDB.open(clientCacheConfig.cacheName,clientCacheConfig.cacheVersion);r.onerror=e=>{t("IndexedDB error")},r.onupgradeneeded=e=>{const t=e.target.result;if(!t.objectStoreNames.contains("geojson")){t.createObjectStore("geojson",{keyPath:"url"}).createIndex("timestamp","timestamp")}},r.onsuccess=t=>{e(t.target.result)}}))}async function storeInIndexedDB(e,t){try{const r=await initializeDB();return new Promise(((a,n)=>{const i=r.transaction(["geojson"],"readwrite").objectStore("geojson"),o={url:e,data:t,timestamp:Date.now()},c=i.put(o);c.onsuccess=()=>a(),c.onerror=e=>{n(e)}}))}catch(e){}}async function getFromIndexedDB(e){try{const t=await initializeDB();return new Promise(((r,a)=>{const n=t.transaction(["geojson"],"readonly").objectStore("geojson").get(e);n.onsuccess=e=>{const t=e.target.result;t&&Date.now()-t.timestamp<clientCacheConfig.maxAge?r(t.data):r(null)},n.onerror=e=>{a(e)}}))}catch(e){return null}}function normalizeUrl(e){try{const t=new URL(e);t.searchParams.delete("csrfmiddlewaretoken");for(const[e,r]of Array.from(t.searchParams.entries()))""===r.trim()&&t.searchParams.delete(e);return t.searchParams.sort(),t.toString()}catch(t){return e}}async function cleanupCache(){try{const e=await initializeDB(),t=e.transaction(["geojson"],"readwrite").objectStore("geojson"),r=t.index("timestamp").openCursor(null,"prev");let a=0;const n=[];r.onsuccess=e=>{const r=e.target.result;r?(a++,a>clientCacheConfig.maxEntries&&n.push(r.primaryKey),r.continue()):(n.forEach((e=>t.delete(e))),n.length)},r.onerror=e=>{}}catch(e){}}function showLoadingIndicator(){map.spin(!0)}function hideLoadingIndicator(){map.spin(!1)}function showMapOverlay(){try{document.getElementById("map-overlay").style.display="flex"}catch(e){}}function hideMapOverlay(){try{document.getElementById("map-overlay").style.display="none"}catch(e){}}function displayErrorMessage(e){}function displayTimeoutError(){}function prepareMapRefresh(){try{lockCustomElements()}catch(e){}try{lockFilter()}catch(e){}showLoadingIndicator()}function clearMap(){map.eachLayer((e=>{e instanceof L.GeoJSON&&map.removeLayer(e)}))}function refreshMap(e,t=12e4){let r=!0;Promise.all(e).then((()=>{r=!1,orderLayers(),adjustMapBounds()})).catch((e=>{r=!1,displayErrorMessage(e)})).finally(cleanup),setTimeout((()=>{r&&(r=!1,displayTimeoutError(),cleanup())}),t)}function updateUrlSearchParams(){const e=parseFilterParameters(),t=new URL(window.location);t.search=e.toString(),window.history.replaceState({},"",t.toString())}function cleanup(){try{updateUrlSearchParams()}catch(e){}hideLoadingIndicator();try{unlockFilter()}catch(e){}try{unlockCustomElements()}catch(e){}}function orderLayers(e=mapConfig.layerOrder||defaultLayerOrder){if(!Array.isArray(e))return;const t=["region","catchment","features"];e.filter((e=>!t.includes(e))).length;e.filter((e=>t.includes(e))).forEach(((e,t)=>{"region"===e?regionLayer?.bringToFront():"catchment"===e?catchmentLayer?.bringToFront():"features"===e&&featuresLayer?.bringToFront()}))}function setLayerOrder(e){if(!Array.isArray(e)||0===e.length)return void(mapConfig.layerOrder=defaultLayerOrder);const t=["region","catchment","features"],r=e.filter((e=>t.includes(e)));0!==r.length?mapConfig.layerOrder=r:mapConfig.layerOrder=defaultLayerOrder}function getQueryParameters(){return parseFilterParameters()}function transformSearchParams(e){if(e instanceof URLSearchParams)return e;{const t=new URLSearchParams;for(const[r,a]of Object.entries(e))Array.isArray(a)?a.forEach((e=>t.append(r,e))):t.append(r,a.toString());return t}}async function fetchData(e){try{const t=await fetch(e);if(!t.ok)throw new Error(`HTTP error ${t.status}: ${t.statusText}`);return await t.json()}catch(e){throw e}}function validateParams(e,t){for(const r of t)if(!e||!(r in e))throw new Error(`Missing required parameter: ${r}`)}function buildUrl(e,t){const r=new URL(e,window.location.origin);return r.search=transformSearchParams(t).toString(),r.toString()}async function fetchRegionGeometry(e){validateParams(e,["id"]);const t=buildUrl(mapConfig.regionLayerGeometriesUrl,{id:e.id}),r=normalizeUrl(t);try{const e=await getFromIndexedDB(r);if(e)return void renderRegion(e);const a=await fetchData(t);await storeInIndexedDB(r,a),await cleanupCache(),renderRegion(a)}catch(e){displayErrorMessage(e)}}async function fetchCatchmentGeometry(e){validateParams(e,["id"]);const t=buildUrl(mapConfig.catchmentLayerGeometriesUrl,{id:e.id}),r=normalizeUrl(t);try{const e=await getFromIndexedDB(r);if(e)return void renderCatchment(e);const a=await fetchData(t);await storeInIndexedDB(r,a),await cleanupCache(),renderCatchment(a)}catch(e){displayErrorMessage(e)}}async function fetchFeatureGeometries(e){hideMapOverlay();const t=mapConfig.featuresId?{id:mapConfig.featuresId}:e,r=buildUrl(mapConfig.featuresLayerGeometriesUrl,t),a=normalizeUrl(r);try{const e=await getFromIndexedDB(a);if(e)return void renderFeatures(e);const t=await fetchData(r);await storeInIndexedDB(a,t),await cleanupCache(),renderFeatures(t)}catch(e){displayErrorMessage(e)}}async function fetchFeatureDetails(e){let t="object"==typeof e?e.id||e.properties.id:e;if(t=t.toString(),Number.isInteger(parseInt(t))){const e=`${mapConfig.featuresLayerDetailsUrlTemplate}${t}/`,r=await fetch(e);return await r.json()}}async function fetchFeaturesLayerSummary(e){const t=mapConfig.featuresLayerSummariesUrl+"?"+transformSearchParams(e).toString();try{const e=await fetch(t);if(!e.ok)throw new Error(`HTTP error ${e.status}: ${e.statusText}`);renderSummaries(await e.json())}catch(e){}}function removeExistingLayer(e){e&&map.removeLayer(e)}function initializeRenderers(){const e=L.canvas({padding:.5});regionLayerStyle=mapConfig.regionLayerStyle,regionLayerStyle.renderer=e,catchmentLayerStyle=mapConfig.catchmentLayerStyle,catchmentLayerStyle.renderer=e,featuresLayerStyle=mapConfig.featuresLayerStyle,featuresLayerStyle.renderer=e}function renderRegion(e){removeExistingLayer(regionLayer),regionLayer=L.geoJson(e,{style:regionLayerStyle,interactive:!1,pane:"regionPane"}),regionLayer.addTo(map)}function renderCatchment(e){removeExistingLayer(catchmentLayer),catchmentLayer=L.geoJson(e,{style:catchmentLayerStyle,interactive:!1,pane:"catchmentPane"}),catchmentLayer.addTo(map)}function createFeatureLayerBindings(e){e.on("click",(async function(e){await clickedFeature(e)}))}function renderFeatures(e){if(!e||!e.features||0===e.features.length)return;removeExistingLayer(featuresLayer);const t=e.features[0].geometry.type;"Polygon"===t||"MultiPolygon"===t?featuresLayer=L.geoJson(e,{style:featuresLayerStyle,pane:"featuresPane"}):"Point"===t&&(featuresLayer=L.geoJson(e,{pointToLayer:(e,t)=>L.circleMarker(t,featuresLayerStyle),pane:"featuresPane"})),createFeatureLayerBindings(featuresLayer),featuresLayer.addTo(map)}function adjustMapBounds(){const e=[{key:"region",layer:regionLayer},{key:"catchment",layer:catchmentLayer},{key:"features",layer:featuresLayer}],t=e.findIndex((e=>e.key===mapConfig.adjustBoundsToLayer));if(-1===t)return!1;const r=[...e.slice(t),...e.slice(0,t)];for(const{key:e,layer:t}of r)if(t&&t.getBounds)try{const e=t.getBounds();if(e.isValid())return map.fitBounds(e),!0}catch(e){}return!1}function isEmptyArray(e){return Array.isArray(e)&&0===e.length}function isValidHttpUrl(e){let t;try{t=new URL(e)}catch(e){return!1}return"http:"===t.protocol||"https:"===t.protocol}function capitalizeFirstLetter(e){return e.charAt(0).toUpperCase()+e.slice(1)}function renderSummaryContainer(e,t){Object.keys(e).forEach((r=>{if(!isEmptyArray(e[r])&&null!==e[r]){const a=document.createElement("div"),n=document.createElement("P"),i=document.createElement("B");i.innerText=capitalizeFirstLetter(r);let o=e[r];"object"==typeof e[r]&&("label"in e[r]&&(i.innerText=capitalizeFirstLetter(e[r].label)),"value"in e[r]&&(o=e[r].value)),i.innerText+=":",n.appendChild(i),a.appendChild(n);const c=document.createElement("P");if(Array.isArray(o)){const e=document.createElement("ul");c.appendChild(e),o.forEach((function(t){const r=document.createElement("li");if(t&&"object"==typeof t&&"url"in t&&"name"in t){const e=document.createElement("a");e.href=t.url,e.innerText=t.name,e.setAttribute("target","_blank"),r.appendChild(e)}else if(isValidHttpUrl(t.toString())){const e=document.createElement("a");e.href=t.toString(),e.innerText=t.toString(),e.setAttribute("target","_blank"),r.appendChild(e)}else r.innerText=t.toString();e.appendChild(r)}))}else c.innerText=o.toString();a.appendChild(c),"id"===r&&(a.className="d-none",t.className+=" pk-holder",t.setAttribute("data-pk",e.id)),t.appendChild(a)}}))}function renderSummaries(e){const t=document.getElementById("summary-container");if(t.textContent="","summaries"in e){if(e.summaries.length>1){const r=document.createElement("P");r.innerText="Found "+e.summaries.length+" items:",t.appendChild(r);const a=document.createElement("div");a.id="summaries_accordion",a.className="accordion",t.appendChild(a),e.summaries.forEach(((e,t)=>{const r=document.createElement("div");r.className="card",a.appendChild(r);const n=document.createElement("div");n.className="card-header collapse-selector",n.setAttribute("role","button"),n.setAttribute("data-toggle","collapse"),n.setAttribute("href","#collapse"+t.toString()),n.setAttribute("aria-expanded","true"),n.setAttribute("aria-controls","collapse"+t.toString()),e.id&&n.setAttribute("data-pk",e.id);const i=t+1;n.innerHTML="<b>#"+i.toString()+"</b>",r.appendChild(n);const o=document.createElement("div");o.id="collapse"+t.toString(),o.className="summary collapse",o.setAttribute("aria-labelledby","collapse"+t.toString()),o.setAttribute("data-parent","#summaries_accordion"),r.appendChild(o);const c=document.createElement("div");c.className="card-body",o.appendChild(c),renderSummaryContainer(e,c)}))}else if(1===e.summaries.length){renderSummaryContainer(e.summaries[0],t)}document.querySelector("#info-card-body").classList.add("show")}}async function getFeatureDetails(e){try{renderFeatureDetails(await fetchFeatureDetails(e)),scrollToSummaries(),updateUrls(e)}catch(e){}}function formatHeader(e){return e.replace(/([A-Z])/g," $1").replace(/_/g," ").replace(/\w\S*/g,(e=>e.charAt(0).toUpperCase()+e.substr(1).toLowerCase())).trim()}function formatList(e,t){if(!e)return"";const r=e.split(t).filter((e=>e.trim()));return 0===r.length?"":`<ul class="list-disc pl-4">\n        ${r.map((e=>`<li>${e.trim()}</li>`)).join("")}\n    </ul>`}function truncateUrl(e,t=40){return e.length>t?e.substring(0,t)+"...":e}function formatUrls(e){if(!e)return"";const t=e.split(", ").filter(Boolean);return 0===t.length?"":t.map((e=>`<li>\n            <a href="${e}" \n               title="${e}"\n               target="_blank" \n               rel="noopener noreferrer"\n               class="url-link hover:text-blue-600">\n                ${truncateUrl(e)}\n            </a>\n        </li>`)).join("")}function renderFeatureDetails(e){const t=document.getElementById("summary-container");t.innerHTML="";const r=document.createDocumentFragment();Object.entries(e).filter((([e])=>fieldConfig[e]?.include)).forEach((([e,t])=>{const a=fieldConfig[e].format(t);if(a){const t=formatHeader(e),n=document.createElement("p"),i=document.createElement("strong");i.textContent=`${t}:`,n.appendChild(i),n.appendChild(document.createElement("br")),n.innerHTML+=a,r.appendChild(n)}})),t.appendChild(r),document.querySelector("#info-card-body").classList.add("show")}function scrollToSummaries(){}function updateUrls(e){}async function clickedFeature(e){}function clickedFilterButton(){let e;prepareMapRefresh();try{e=parseFilterParameters()}catch(e){}mapConfig.loadFeatures=!0,loadLayers(e)}function adaptMapConfig(){}function loadMap(e){if(e){adaptMapConfig(),initializeRenderers(),prepareMapRefresh();try{loadLayers()}catch(e){}}}function getFeaturesLayerFilterParameters(){let e;try{return e=mapConfig.applyFilterToFeatures?parseFilterParameters():getQueryParameters(),e||new URLSearchParams}catch(e){return new URLSearchParams}}function loadLayers(){const e=getFeaturesLayerFilterParameters(),t=[],r=e.get("region")||(mapConfig.loadRegion?mapConfig.regionId:null);r&&t.push(fetchRegionGeometry({id:r}));const a=e.get("catchment")||(mapConfig.loadCatchment?mapConfig.catchmentId:null);if(a&&t.push(fetchCatchmentGeometry({id:a})),!0===mapConfig.loadFeatures)t.push(fetchFeatureGeometries(e)),t.push(fetchFeaturesLayerSummary(e));else try{showMapOverlay()}catch(e){}t.length>0&&Promise.all(t).then((()=>refreshMap(t))).catch((e=>{}))}function selectFeature(e){e.bringToFront(),e.setStyle({color:"#f49a33"})}function resetFeatureStyles(e){e.resetStyle(),e.bringToBack()}window.addEventListener("map:init",(function(e){map=e.detail.map}));