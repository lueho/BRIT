# Generated by Django 3.0.7 on 2021-02-17 19:51

import django.contrib.gis.db.models.fields
import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('materials', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Catchment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='Custom Catchment', max_length=256)),
                ('description', models.TextField(blank=True, null=True)),
                ('type', models.CharField(choices=[('administrative', 'administrative'), ('custom', 'custom')], default='custom', max_length=14)),
                ('geom', django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='GeoDataset',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=56)),
                ('description', models.TextField(blank=True, null=True)),
                ('model_name', models.CharField(choices=[('HamburgRoadsideTrees', 'HamburgRoadsideTrees'), ('HamburgGreenAreas', 'HamburgGreenAreas'), ('NantesGreenhouses', 'NantesGreenhouses')], max_length=56, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='InventoryAlgorithm',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=56)),
                ('source_module', models.CharField(max_length=255, null=True)),
                ('function_name', models.CharField(max_length=56, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('default', models.BooleanField(default=False, verbose_name='Default for this combination of geodataset and feedstock')),
                ('source', models.CharField(blank=True, max_length=200, null=True)),
                ('feedstock', models.ManyToManyField(limit_choices_to={'is_feedstock': True}, to='materials.Material')),
                ('geodataset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventories.GeoDataset')),
            ],
        ),
        migrations.CreateModel(
            name='InventoryAlgorithmParameter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('descriptive_name', models.CharField(max_length=56)),
                ('short_name', models.CharField(max_length=28, validators=[django.core.validators.RegexValidator(code='invalid_parameter_name', message='Invalid parameter short_name. Do not use spaceor special characters.', regex='^\\w{1,28}$')])),
                ('description', models.TextField(blank=True, null=True)),
                ('unit', models.CharField(blank=True, max_length=20, null=True)),
                ('is_required', models.BooleanField(default=False)),
                ('inventory_algorithm', models.ManyToManyField(to='inventories.InventoryAlgorithm')),
            ],
        ),
        migrations.CreateModel(
            name='InventoryAlgorithmParameterValue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=56)),
                ('description', models.TextField(blank=True, null=True)),
                ('value', models.FloatField()),
                ('standard_deviation', models.FloatField(null=True)),
                ('source', models.CharField(blank=True, max_length=200, null=True)),
                ('default', models.BooleanField(default=False)),
                ('parameter', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='inventories.InventoryAlgorithmParameter')),
            ],
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=56)),
                ('country', models.CharField(max_length=56)),
                ('geom', django.contrib.gis.db.models.fields.MultiPolygonField(null=True, srid=4326)),
            ],
        ),
        migrations.CreateModel(
            name='Scenario',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='Custom Scenario', max_length=56)),
                ('description', models.TextField(blank=True, null=True)),
                ('catchment', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='inventories.Catchment')),
                ('owner', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('region', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='inventories.Region')),
            ],
        ),
        migrations.CreateModel(
            name='SFBSite',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, null=True)),
                ('geom', django.contrib.gis.db.models.fields.PointField(null=True, srid=4326)),
                ('owner', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ScenarioStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.IntegerField(choices=[(1, 'Changed'), (2, 'Running'), (3, 'Finished')], default=1)),
                ('scenario', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to='inventories.Scenario')),
            ],
        ),
        migrations.CreateModel(
            name='ScenarioInventoryConfiguration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('feedstock', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='materials.MaterialSettings')),
                ('geodataset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventories.GeoDataset')),
                ('inventory_algorithm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventories.InventoryAlgorithm')),
                ('inventory_parameter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventories.InventoryAlgorithmParameter')),
                ('inventory_value', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventories.InventoryAlgorithmParameterValue')),
                ('scenario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventories.Scenario')),
            ],
        ),
        migrations.AddField(
            model_name='scenario',
            name='site',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='inventories.SFBSite'),
        ),
        migrations.AddField(
            model_name='geodataset',
            name='region',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventories.Region'),
        ),
        migrations.AddField(
            model_name='catchment',
            name='region',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventories.Region'),
        ),
    ]
